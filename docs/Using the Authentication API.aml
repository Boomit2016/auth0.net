<?xml version="1.0" encoding="utf-8"?>
<topic id="98535358-304b-445b-9b15-37fda98b7dee" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        This section will take your through the basics of using the Authentication API. Before you begin, ensure that you have <link xlink:href="51ca43f1-ab9d-4c83-859d-9eb1af04f37b#InstallAuthenticationApi">installed the Nuget package.</link>
      </para>
    </introduction>

    <section>
      <title>Basic Usage</title>
      <content>
        <para>Ensure that you include the Authentication API namespace in your source code file:</para>
        <code language="c#">
          using Auth0.AuthenticationApi;
        </code>
        <para>
          To start using the API, you need to create an instance of the <codeEntityReference>T:Auth0.AuthenticationApi.AuthenticationApiClient</codeEntityReference> class, passing the URL of your Auth0 instance:
        </para>
        <code language="c#">
          var client = new AuthenticationApiClient(new Uri("https://auth0-dotnet-integration-tests.auth0.com/"));
        </code>

        <para>
          For more details on the various methods that are available, please refer to the documentation of the <codeEntityReference>T:Auth0.AuthenticationApi.AuthenticationApiClient</codeEntityReference> class.
        </para>
      </content>
    </section>

    <section>
      <title>Using URL Builders</title>
      <content>
        <para>
          Several helper methods are available to allow you to build URLs that you can redirect your user to for example to build up an authorization URL.
          These methods follow a fluent syntax, meaning that you can keep chaining method calls together to build up the URL.
          Finally, to build the actual URL, you will need to call the <codeEntityReference>M:Auth0.AuthenticationApi.Builders.UrlBuilderBase`1.Build</codeEntityReference> method.
        </para>

        <para>The following are the list of URL builder helper methods:</para>

        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference>M:Auth0.AuthenticationApi.AuthenticationApiClient.BuildAuthorizationUrl</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>M:Auth0.AuthenticationApi.AuthenticationApiClient.BuildLogoutUrl</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>M:Auth0.AuthenticationApi.AuthenticationApiClient.BuildSamlUrl</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>M:Auth0.AuthenticationApi.AuthenticationApiClient.BuildWsFedUrl</codeEntityReference>
            </para>
          </listItem>
        </list>

        <para>For example, to build up an authorization URL, you can write the following code:</para>

        <code language="c#">
          var client = new AuthenticationApiClient(new Uri("https://auth0-dotnet-integration-tests.auth0.com/"));

          var authorizationUrl = client.BuildAuthorizationUrl()
            .WithResponseType(AuthorizationResponseType.Code)
            .WithClient("abcdef")
            .WithConnection("google-oauth2")
            .WithRedirectUrl("http://www.myapp.com/redirect")
            .WithScope("openid offline_access")
            .Build();
        </code>
      </content>

    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
